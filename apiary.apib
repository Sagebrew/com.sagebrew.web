FORMAT: 1A

# Sagebrew #
The Sagebrew API is based on a REST infrastructure. We've crafted our API with 
predictablility in mind and have stived to maintain a consistent architecture through
each of our interfaces. We utilize resource based URLs and HTTP response codes to 
alert developers of errors. We utilize OAuth 2.0 for authentication to ensure 
you can securely access our API and are able to easily meet the needs of your 
users utilizing existing libraries. Our API uses JSON to structure our responses
and you can expect to get it back across each ouf our endpoints.

## Rendering ##
For some endpoints Sagebrew provides server side rendering of resources so that you
can insert the html directly into your app. This may not be the wanted behavior by
most people so we have made this functionality available through an endpoint method.
For endpoints that indicate they can be rendered on the server side you can access
the method via `/:resource/:id/render/` for detail routes or `/:resource/render/` 
for list routes.


## Generic Query Parameters ##
You can utilize the following query parameters across each of our endpoints:

`relations=hyperlink` - This will give you all of the relational fields in the 
form of a hyperlink to that resource's detail page instead of the id of the object.

`expand` - By setting `expand` to `true` each relation will be expanded out and nested
within the parent resource.

`expedite` - By setting `expedite` to `true` all relational fields will be set to either
empty lists or `null`. This can be used if you don't care about the included relational data
and improve response time.

`page_size` - This can be used to modify the default page size to your needs. It expects an
integer to be pased and the limitation is that it cannot be set above 100.

`page` - This can be used to access a specific page in a paginated list.


## Pagination ##
All of our base list endpoints, those accessed at `/:resource/`, are paginated to improve
performance and browsability. Our pagination strategy is based on pages and our default
page size contains 15 objects. This can easily be modified to fit your needs by using the
`page_size` query parameter as indicated above in *Generic Query Parameters*. There is one
limitation on this which is that page sizes cannot be over 100 objects.

Since we paginate our base lists you should not expect the results of the request to 
be in the top level object. Instead they are listed within the `results` key. An example
of what is returned can be found below:

    {
        "count": 16,
        "next": "https://www.sagebrew.com/v1/questions/?page=2",
        "previous": null,
        "results": [...]
    }

The `count` key provides a tally of how many objects are available, `next` provides a 
link to the next page, `previous` provides a link to the previous page, and `results`
as mentioned above contains a list of the objects for the page. One other note as can
be seen in the example is that `next` and `previous` are set to `null` if there are
no next or previous pages.


## Error Handling ##
TODO


# Group Profile #
Sagebrew provides each of its users with a Profile which 
has a set amount of publicly accessible data. These endpoints should be utilized
for retrieving user specific data unless you're utilizing our Three Legged OAuth
implementation and are trying to gather information about the currently logged in
user.

## Profile Collection [/v1/profiles/] ##
### List all Profiles [GET] ###
+ Response 200 (application/json)

        {
            "count": 2,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": "devon_bleibtrey",
                    "type": "profile",
                    "first_name": "Devon",
                    "last_name": "Bleibtrey",
                    "username": "devon_bleibtrey",
                    "href": "https://www.sagebrew.com/v1/profiles/devon_bleibtrey/",
                    "profile_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/bc2ed03b9e17-198x198.jpeg",
                    "wallpaper_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/723335ffa833-1464x250.jpeg",
                    "reputation": 0,
                    "privileges": [
                        "base_privilege"
                    ],
                    "actions": [
                        "post",
                        "solution",
                        "question"
                    ],
                    "url": "https://www.sagebrew.com/user/devon_bleibtrey/"
                },
                {
                    "id": "tyler_wiersing",
                    "type": "profile",
                    "first_name": "Tyler",
                    "last_name": "Wiersing",
                    "username": "tyler_wiersing",
                    "href": "https://www.sagebrew.com/v1/profiles/tyler_wiersing/",
                    "profile_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/886832972c69-198x198.jpeg",
                    "wallpaper_pic": null,
                    "reputation": 0,
                    "privileges": [
                        "base_privilege",
                        "beta_user"
                    ],
                    "actions": [
                        "post",
                        "solution",
                        "question",
                        "intercom"
                    ],
                    "url": "https://www.sagebrew.com/user/tyler_wiersing/"
                }
            ]
        }

## Profile [/profiles/{id}/] ##
The profile detail endpoint can be used to retrieve a singular profile.

+ Parameters
    + id (required, username, `devon_bleibtrey`) ... String `id` representating the username of the profile you would
    like to access. This can be up to 30 characters long.
    Has example value.

### Retrieve a Profile [GET] ###
+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {
                "id": "devon_bleibtrey",
                "type": "profile",
                "first_name": "Devon",
                "last_name": "Bleibtrey",
                "username": "devon_bleibtrey",
                "href": "https://www.sagebrew.com/v1/profiles/devon_bleibtrey/",
                "profile_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/bc27-198x198.jpeg",
                "wallpaper_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/723f3-1464x250.jpeg",
                "reputation": 0,
                "privileges": [
                    "base_privilege"
                ],
                "actions": [
                    "post",
                    "solution",
                    "question"
                ],
                "url": "https://www.sagebrew.com/user/devon_bleibtrey/"
            }

## Me [/me/] ##
The me endpoint is used to access the profile that is currently authenticated.

### Retrieve Logged In Profile [GET] ###
+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {
                "id": "devon_bleibtrey",
                "type": "profile",
                "first_name": "Devon",
                "last_name": "Bleibtrey",
                "username": "devon_bleibtrey",
                "href": "https://www.sagebrew.com/v1/profiles/devon_bleibtrey/",
                "profile_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/bc27-198x198.jpeg",
                "wallpaper_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/723f3-1464x250.jpeg",
                "reputation": 0,
                "privileges": [
                    "base_privilege"
                ],
                "actions": [
                    "post",
                    "solution",
                    "question"
                ],
                "url": "https://www.sagebrew.com/user/devon_bleibtrey/"
            }


## Profile's Friend Requests [/me/friend_requests/] ##
This provides access to all of the unhandled friend requests that have been sent
to the currently authenticated user. These include requests they've seen but not
responded to and ones they have yet to see. This is distinguished by `seen` key
which shall be `True` if they have already viewed the request but not done anything
and `False` if they have yet to see it.
### Retrieve Friend Requests [GET] ###
+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {
                "count": 1,
                "next": null,
                "previous": null,
                "results": [
                    {
                        "id": "28796d8c-33a9-11e5-93f6-080027a2dd8c",
                        "type": "friend_request",
                        "created": "2015-07-26T15:15:32.661206Z",
                        "seen": false,
                        "time_sent": "2015-07-26T15:15:32.661254Z",
                        "time_seen": null,
                        "response": null,
                        "from_user": {
                            "id": "jack_sage",
                            "type": "profile",
                            "created": "2015-07-24T01:24:10.263953Z",
                            "first_name": "Jack",
                            "last_name": "Sage",
                            "username": "jack_sage",
                            "href": "/v1/profiles/jack_sage/",
                            "profile_pic": "https://sagebrew-dev.s3.amazonaws.com/profile_pictures/jack_sage.jpeg",
                            "wallpaper_pic": null,
                            "reputation": 0,
                            "privileges": [
                                "base_privilege"
                            ],
                            "donations": [],
                            "actions": [
                                "question",
                                "solution",
                                "post"
                            ],
                            "url": "/user/jack_sage/",
                            "campaign": null
                        },
                        "to_user": {
                            "id": "devon_sage",
                            "type": "profile",
                            "created": "2015-07-03T19:33:37.944944Z",
                            "first_name": "Devon",
                            "last_name": "Sage",
                            "username": "devon_sage",
                            "href": "/v1/profiles/devon_sage/",
                            "profile_pic": "https://sagebrew-dev.s3.amazonaws.com/profile_pictures/devon_sage.jpeg",
                            "wallpaper_pic": "https://sagebrew-dev.s3.amazonaws.com/profile_pictures/devon_background.jpeg",
                            "reputation": 0,
                            "privileges": [
                                "base_privilege",
                                "beta_user"
                            ],
                            "donations": [
                                "94cd5b3e-21ba-11e5-93f5-080027a2dd8c",
                                "94c565be-21ba-11e5-93f5-080027a2dd8c",
                                "94be82ee-21ba-11e5-93f5-080027a2dd8c"
                            ],
                            "actions": [
                                "post",
                                "solution",
                                "question",
                                "intercom"
                            ],
                            "url": "/user/devon_sage/",
                            "campaign": "devon_sage"
                        }
                    }
                ]
            }


## Profile's Friend Requests Accept [/me/friend_requests/{id}/accept/] ##
This endpoint requires an existing Friend Request id to be included in the URL and
passed via a POST request. It is used to indicate the authenticated user has 
accepted the given friend request and creates a Friend relationship between the
two users. It will also result in removing the Friend Request from the system so
that it will no longer appear in the user's Friend Request list.

### Accept Friend Requests [POST] ###
+ request_id (string) - Identifier of the request that is being accepted
+ Request (application/json)

        {"request_id": "c57f90b3-2839-4d50-a292-67c29c4d5b4f}

+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {
                "detail": "Successfully accepted friend request.",
                "status": 200,
                "developer_message": ""
            }

## Profile's Friend Requests Decline [/me/friend_requests/{id}/decline/] ##
This endpoint requires an existing Friend Request id to be included in the URL and
passed via a POST request. It is used to indicate the authenticated user has 
declined the given friend request. It will also result in removing the Friend 
Request from the system so that it will no longer appear in the user's 
Friend Request list.

### Decline Friend Requests [POST] ###
+ request_id (string) - Identifier of the request that is being declined
+ Request (application/json)

        {"request_id": "c57f90b3-2839-4d50-a292-67c29c4d5b4f}

+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {
                "detail": "Successfully declined friend request.",
                "status": 204,
                "developer_message": ""
            }


## Profile's Friend Requests Block [/me/friend_requests/{id}/block/] ##
This endpoint requires an existing Friend Request id to be included in the URL and
passed via a POST request. It is used to indicate the authenticated user would like
to block the current and all subsequent requests from the user who had sent the request.
This will result in a blocker being put in place that will stop the other user from
being able to send additional requests to the authenticated user. It will also result
in the Friend Request being removed from the authenticated user's friend request list.

### Block Friend Requests [POST] ###
+ request_id (string) - Identifier of the request that is being blocked
+ Request (application/json)

        {"request_id": "c57f90b3-2839-4d50-a292-67c29c4d5b4f}

+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {
                "detail": "Successfully blocked further friend requests.",
                "status": 204,
                "developer_message": ""
            }


## Profile's Wall [/me/wall/] ##
### Retrieve Wall [GET] ###
+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {}


# Group Campaign #
Campaign related resources of the **Campaign API**

## Campaign Collection [/v1/campaigns/] ##
This endpoint will provide you with a list of campaigns. 

### List all Campaigns [GET] ###
+ Response 200 (application/json)

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": "c2bf72f0-ff25-11e4-8cea-080027242395",
                    "type": "politicalcampaign",
                    "active": true,
                    "biography": "I am running for office, deal with it.",
                    "facebook": "",
                    "linkedin": "",
                    "youtube": "",
                    "twitter": "",
                    "website": "",
                    "wallpaper_pic": "https://sagebrew-dev.s3.amazonaws.com/profile_pictures/5.jpeg"
                    "profile_pic": "https://sagebrew-dev.s3.amazonaws.com/profile_pictures/5a.jpeg",
                    "owner_username": "elizabeth_apple",
                    "url": "https://sagebrew.local.dev/action/elizabeth_apple/",
                    "href": "https://sagebrew.local.dev/v1/campaigns/c2bf72f0-ff25-11e4-8cea-080027242395/",
                    "rounds": [
                        "a0106420-032c-11e5-8cea-080027242395"
                    ],
                    "updates": [
                        "c52684fa-0008-11e5-8cea-080027242395",
                        "d4750af8-0008-11e5-8cea-080027242395",
                        "3a22f86a-0009-11e5-8cea-080027242395",
                        "447709b4-0009-11e5-8cea-080027242395"
                    ],
                    "position": "d8b0526c-ff27-11e4-8cea-080027242395",
                    "active_goals": [
                        "d1f1ee54-032d-11e5-8cea-080027242395"
                    ],
                    "active_round": "a0106420-032c-11e5-8cea-080027242395",
                    "upcoming_round": "eb31b9ea-0331-11e5-8cea-080027242395",
                    "vote_count": 0
                }
            ]
        }
        
## Campaigns [/v1/campaigns/{id}/] ##
Campaign detail endpoint, used to get data for a single specific campaign.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### Retrieve a Campaign [GET] ###
+ Response 200 (application/json)

        {
            "id": "c2bf72f0-ff25-11e4-8cea-080027242395",
            "type": "politicalcampaign",
            "active": true,
            "biography": "I am running for office, deal with it.",
            "facebook": "",
            "linkedin": "",
            "youtube": "",
            "twitter": "",
            "website": "",
            "wallpaper_pic": "https://sagebrew-dev.s3.amazonaws.com/profile_pictures/5.jpeg",
            "profile_pic": "https://sagebrew-dev.s3.amazonaws.com/profile_pictures/5a.jpeg",   
            "owner_username": "elizabeth_apple",
            "url": "https://sagebrew.local.dev/action/elizabeth_apple/",
            "href": "https://sagebrew.local.dev/v1/campaigns/c2bf72f0-ff25-11e4-8cea-080027242395/",
            "rounds": [
                "a0106420-032c-11e5-8cea-080027242395"
            ],
            "updates": [
                "c52684fa-0008-11e5-8cea-080027242395",
                "d4750af8-0008-11e5-8cea-080027242395",
                "3a22f86a-0009-11e5-8cea-080027242395",
                "447709b4-0009-11e5-8cea-080027242395"
            ],
            "position": "d8b0526c-ff27-11e4-8cea-080027242395",
            "active_goals": [
                "d1f1ee54-032d-11e5-8cea-080027242395"
            ],
            "active_round": "a0106420-032c-11e5-8cea-080027242395",
            "upcoming_round": "eb31b9ea-0331-11e5-8cea-080027242395",
            "vote_count": 0
        }
        
## Campaign Editors [/v1/campaigns/{id}/editors/] ##
This endpoint method will return a list of all verified editors for a campaign.
Please note that both the owner of the campaign and all the individuals they have
assigned to be editors will be included in this list.
For security reasons only the campaign owner or editors may utilize this endpoint.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### List all Campaign Editors [GET] ###
+ Response 200 (application/json)

        [
            "tyler_wiersing",
            "devon_bleibtrey"
        ]

## Campaign Accountants [/v1/campaigns/{id}/accountants/] ##
This endpoind method will return a list of all verified accountants for a campaign.
As with editors the owner is included in this list.
For security reasons only the campaign owner or accountants may utilize this endpoint.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### List all Campaign Accountants [GET] ###
+ Response 200 (application/json)

        [
            "tyler_wiersing",
            "devon_bleibtrey"
        ]
        
## Campaign Add Accountants [/v1/campaigns/{id}/add_accountants/] ##
This endpoint allows the owner of the campaign to add accountants.
You can safely include usernames that are already accountants in the list
or only provide the new usernames. Both methods shall work.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### Add Accountants [POST] ###
+ profiles (array[string]) - List of usernames to remove from editors
+ Request (application/json)

        {"profiles": ["tyler_wiersing", "devon_bleibtrey"]}
        
+ Response 200 (application/json)

        {
            "detail": "Successfully added specified users to your campaign accountants.", 
            "status": 200, "developer_message": None
        }
        
## Campaign Remove Accountants [/v1/campaigns/{id}/remove_accountants/] ##
This endpoint allows the owner of the campaign to remove accountants.
This will not fail even if the user is not in the accountants.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### Remove Accountants [POST] ###
+ profiles (array[string]) - List of usernames to remove from editors
+ Request (application/json)

        {"profiles": ["devon_bleibtrey"]}
        
+ Response 200 (application/json)

        {
            "detail": "Successfully removed specified users from your campaign accountants.", 
            "status": 200, "developer_message": None
        }
        
## Campaign Add Editors [/v1/campaigns/{id}/add_editors/] ##
This endpoint allows the owner of the campaign to add editors.
You can safely include usernames that are already editors in the list
or only provide the new usernames. Both methods shall work.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### Add Editors [POST] ###
+ profiles (array[string]) - List of usernames to remove from editors
+ Request (application/json)

        {"profiles": ["devon_bleibtrey", "tyler_wiersing"]}
        
+ Response 200 (application/json)

        {
            "detail": "Successfully added specified users to your campaign editors.", 
            "status": 200, "developer_message": None
        }
        
## Campaign Remove Editors [/v1/campaigns/{id}/remove_editors/] ##
This endpoint allows the owner of the campaign to remove editors.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### Remove Editors [POST] ###

This endpoint allows the owner to remove editors from their campaign. 
This does not fail even if the user is not already an editor.

+ profiles (array[string]) - List of usernames to remove from editors

+ Request (application/json)

        {"profiles": ["devon_bleibtrey", "tyler_wiersing"]}
        
+ Response 200 (application/json)

        {
            "detail": "Successfully removed specified users from your campaign editors.", 
            "status": 200, "developer_message": None
        }
        
## Pledge Vote to Campaign [/v1/campaigns/{id}/vote/] ##
This endpoint allows users to add or remove their pledged vote to a Political Campaign.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### Pledge Vote [POST] ###
+ vote_type (integer) - Must be 1
+ Request (application/json)

        {
            "vote_type": 1
        }

+ Response 200 (application/json)

        {
            "detail": "Successfully pledged vote.",
            "status": 200,
            "developer_message": None
        }
    
## Campaign Rounds [/v1/campaigns/{id}/rounds/] ##
This endpoints returns a paginated list of rounds for a campaign.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### List Campaign Rounds [GET] ###

+ Response 200 (application/json)
        
        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": "a0106420-032c-11e5-8cea-080027242395",
                    "type": "round",
                    "campaign": "c2bf72f0-ff25-11e4-8cea-080027242395",
                    "active": false,
                    "start_date": null,
                    "completed": null,
                    "goals": [
                        "f2e92106-064b-11e5-8cea-080027242395",
                        "d1f1ee54-032d-11e5-8cea-080027242395"
                    ],
                    "previous_round": null,
                    "next_round": null
                }
            ]
        }

## Campaign Updates [/v1/campaigns/{id}/updates/] ##
This endpoints returns a paginated list of updates for a campaign.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### List Campaign Updates [GET] ###

+ Response 200 (application/json)

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": "c52684fa-0008-11e5-8cea-080027242395",
                    "type": "update",
                    "object_uuid": "c52684fa-0008-11e5-8cea-080027242395",
                    "content": "&lt;p&gt;This is an update&lt;p&gt;",
                    "created": "2015-05-21T22:28:57.204457Z",
                    "upvotes": 0,
                    "downvotes": 0,
                    "vote_count": 0,
                    "vote_type": null,
                    "view_count": 0,
                    "profile": "https://sagebrew.local.dev/v1/profiles/tyler_wiersing/",
                    "url": "https://sagebrew.local.dev/v1/updates/c52684fa-0008-11e5-8cea-080027242395/",
                    "last_edited_on": "2015-05-21T22:28:57.202276Z",
                    "flagged_by": [],
                    "html_content": "<p>&lt;p&gt;This is an updated&lt;p&gt;</p>",
                    "title": null,
                    "goals": [],
                    "campaign": "c2bf72f0-ff25-11e4-8cea-080027242395"
                }
            ]
        }

## Campaign Goals [/v1/campaigns/{id}/goals/] ##
This endpoint returns all of the goals for a given campaign.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### List all Campaign Goals [GET] ###

+ Response 200 (application/json)

        {
            "count": 2,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": "f2e92106-064b-11e5-8cea-080027242395",
                    "type": "goal",
                    "campaign": "c2bf72f0-ff25-11e4-8cea-080027242395",
                    "initial": false,
                    "title": "This is an example goal",
                    "summary": "The purpose of this goal is to give an api example",
                    "description": null,
                    "pledged_vote_requirement": 0,
                    "monetary_requirement": 5000,
                    "completed": false,
                    "completed_date": null,
                    "updates": [],
                    "associated_round": null,
                    "donations": [],
                    "previous_goal": "d1f1ee54-032d-11e5-8cea-080027242395",
                    "next_goal": null
                },
                {
                    "id": "d1f1ee54-032d-11e5-8cea-080027242395",
                    "type": "goal",
                    "campaign": "c2bf72f0-ff25-11e4-8cea-080027242395",
                    "initial": true,
                    "title": "Gimme money",
                    "summary": "money pls",
                    "description": "moneyyyyyyy",
                    "pledged_vote_requirement": 0,
                    "monetary_requirement": 2000,
                    "completed": false,
                    "completed_date": null,
                    "updates": [],
                    "associated_round": "a0106420-032c-11e5-8cea-080027242395",
                    "donations": [],
                    "previous_goal": null,
                    "next_goal": "f2e92106-064b-11e5-8cea-080027242395"
                }
            ]
        }
        
### Create a goal [POST] ###
This endpoint will allow the owner of a campaing or the editors to create a goal

+ title (string) - Title of the goal, should be around 40 characters.
+ summary (string) - The summary should be a shortened version of the description, should be around 300 characters.
+ description (string) - A long version of the summary including more details.
+ pledged_vote_requirement (integer) - Amount of pledged votes needed to accomplish this goal.
+ monetary_requirement (integer) - Total amount of money needed to complete the goal.
+ Request (application/json)

        {
            "title": "This is a goal title",
            "summary": "This is a goal summary",
            "description": "",
            "pledged_vote_requirement": 100,
            "monetary_requirement": 2000,
        }
        
+ Response 200 (application/json)

        {
            "detail": "Successfully created goal."
            "status_code": 200
        }
        
+ Response 403 (application/json)

        {
            "detail": "Authentication credentials were not provided.",
            "status_code": 403
        }
        
## Campaign Donations [/v1/campaigns/{id}/donations/] ##
This endpoint allows users to create donations on a campaign.

### List all Donations [GET] ##
This endpoint will return a list of the donations given to a campaign.
Only the owner or accountants for the campaign are allowed to access the 
list endpoint.

+ Response 200 (application/json)

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "completed": false,
                    "amount": 6000,
                    "owner_username": "tyler_wiersing",
                    "donated_for": "f2e92106-064b-11e5-8cea-080027242395",
                    "applied_to": [
                        "f2e92106-064b-11e5-8cea-080027242395",
                        "d1f1ee54-032d-11e5-8cea-080027242395"
                    ],
                    "owned_by": "tyler_wiersing",
                    "campaign": "c2bf72f0-ff25-11e4-8cea-080027242395"
                }
            ]
        }

+ Response 403 (application/json)

        {
            "detail": "You are not authorized to accesss this page", 
            "status_code":403
        }
        
### Create Donation [POST] ##
This endpoint allows users to create donations to a campaign.
+ amount (integer) - Amount of the donation as an integer representing the total number of cents of the donation. 
A $50 donation would be 5000 instead of 50.00.

+ Request (application/json)

        {
            "amount": 5000
        }
        
+ Response 200 (application/json)

        {
            "detail": "Successfully created donation.",
            "status_code": 200
        }
        
# Group Positions #
Position related resources of the **Position API**.
This is a read-only endpoint and only supports GET requests.

## Position Collection [/v1/positions/] ##
This endpoint will provide you with a paginated list of positions.
### List all Positions [GET] ###

+ Response 200 (application/json)

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": "d8b0526c-ff27-11e4-8cea-080027242395",
                    "type": "position",
                    "name": "House Representative",
                    "href": "https://sagebrew.local.dev/v1/positions/d8b0526c-ff27-11e4-8cea-080027242395/",
                    "campaigns": [
                        "c2bf72f0-ff25-11e4-8cea-080027242395"
                    ],
                    "location": "50bf013c-ff27-11e4-8cea-080027242395"
                }
            ]
        }

## Position [/v1/positions/{id}/] ##
This endpoint will provide you with a paginated list of positions. 

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the position you would like 
to access, must be 36 characters long.
    Has example value.

### Retrieve a Position [GET] ###
+ Response 200 (application/json)

        {
            "id": "d8b0526c-ff27-11e4-8cea-080027242395",
            "type": "position",
            "name": "House Representative",
            "href": "https://sagebrew.local.dev/v1/positions/d8b0526c-ff27-11e4-8cea-080027242395/",
            "campaigns": [
                "c2bf72f0-ff25-11e4-8cea-080027242395"
            ],
            "location": "50bf013c-ff27-11e4-8cea-080027242395"
        }
        
# Group Locations #
Location related resources of the **Location API**
This is a read-only endpoint and only supports GET requests.

## Location Collection [/v1/locations/] ##
This endpoint provides a paginated list of locations.

### List all Locations [GET] ###
If a location has geographical data associated with it, the geo_data field will be marked as true, 
and it will be false if there is none. Adding `?expand=true` to your query will get you our 
geographical data for each of the locations returned to you. 

+ Response 200 (application/json)

        {
            "count": 3,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": "5fc698ee-ff26-11e4-8cea-080027242395",
                    "type": "location",
                    "name": "United States of America",
                    "encompasses": [
                        "3d374f84-ff27-11e4-8cea-080027242395"
                    ],
                    "encompassed_by": [],
                    "positions": [],
                    "geo_data": false
                },
                {
                    "id": "3d374f84-ff27-11e4-8cea-080027242395",
                    "type": "location",
                    "name": "Michigan",
                    "encompasses": [
                        "50bf013c-ff27-11e4-8cea-080027242395"
                    ],
                    "encompassed_by": [
                        "5fc698ee-ff26-11e4-8cea-080027242395"
                    ],
                    "positions": [],
                    "geo_data": true
                },
                {
                    "id": "50bf013c-ff27-11e4-8cea-080027242395",
                    "type": "location",
                    "name": "11",
                    "encompasses": [],
                    "encompassed_by": [
                        "3d374f84-ff27-11e4-8cea-080027242395"
                    ],
                    "positions": [
                        "d8b0526c-ff27-11e4-8cea-080027242395"
                    ],
                    "geo_data": true
                }
            ]
        }
    
+ Response 200 (application/json)

        {
            "id": "3d374f84-ff27-11e4-8cea-080027242395",
            "type": "location",
            "name": "Michigan",
            "encompasses": [
                "50bf013c-ff27-11e4-8cea-080027242395"
            ],
            "encompassed_by": [
                "5fc698ee-ff26-11e4-8cea-080027242395"
            ],
            "positions": [],
            "geo_data": {
                "type": "MultiPolygon",
                "coordinates": [
                    [
                        [
                            [
                                -87.088338,
                                42.235334
                            ],
                            [
                                -87.068039,
                                42.314346
                            ],
                            [
                                -87.051814,
                                42.375026
                            ],
                            [
                                -87.040046,
                                42.416993
                            ],
                            [
                                -87.019863,
                                42.493763
                            ],
                            ...
                        ]
                    ]
                ]
            }
        }
        
## Location [/v1/locations/{id}/] ##
This endpoint will get you the location with the id specified in the url.

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### Retrieve a Location [GET] ###
This will get you a single location, you may use `?expand=true` to get the
geographical data for the location.

+ Response 200 (application/json)

        {
            "id": "3d374f84-ff27-11e4-8cea-080027242395",
            "type": "location",
            "name": "Michigan",
            "encompasses": [
                "50bf013c-ff27-11e4-8cea-080027242395"
            ],
            "encompassed_by": [
                "5fc698ee-ff26-11e4-8cea-080027242395"
            ],
            "positions": [],
            "geo_data": true
        }

# Group Rounds #

## Round [/v1/rounds/{id}/] ##

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### Retrieve a Round [GET] ###
This endpoint allows you to get information about the round with the id
specified in the url.

+ Response 200 (application/json)

        {
            "id": "a0106420-032c-11e5-8cea-080027242395",
            "type": "round",
            "campaign": "c2bf72f0-ff25-11e4-8cea-080027242395",
            "active": false,
            "start_date": null,
            "completed": null,
            "goals": [
                "f2e92106-064b-11e5-8cea-080027242395",
                "d1f1ee54-032d-11e5-8cea-080027242395"
            ],
            "previous_round": null,
            "next_round": null
        }
        
# Group Goals #

## Goal [/v1/goals/{id}/] ##

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### Retrieve a Goal [GET] ###
This endpoint allows the owner or editors of a campaign get information about the 
goal with the id specified in the url.

+ Response 200 (application/json)

        {
            "id": "d1f1ee54-032d-11e5-8cea-080027242395",
            "type": "goal",
            "campaign": "c2bf72f0-ff25-11e4-8cea-080027242395",
            "initial": true,
            "title": "Campaign Banners",
            "summary": "This goal will allow me to create some banners.",
            "description": "Creating these banners will allow me to get my name out there and gather some following.",
            "pledged_vote_requirement": 0,
            "monetary_requirement": 2000,
            "completed": false,
            "completed_date": null,
            "updates": [],
            "associated_round": "a0106420-032c-11e5-8cea-080027242395",
            "donations": [],
            "previous_goal": null,
            "next_goal": "f2e92106-064b-11e5-8cea-080027242395"
        }
        
### Update a Goal [PUT] ###
This endpoint allows for owners and editors to update a goal, so long as the goal has not been completed 
or is currently active.

+ Request (application/json)

        {
            "title": "This is a update to the goal title",
            "summary": "Updating the summary",
            "description": "Updating the description.",
            "monetary_requirement": 100000,
            "pledge_vote_requirement": 1
        }
        
+ Response 200 (application/json)

        {
            "id": "d1f1ee54-032d-11e5-8cea-080027242395",
            "type": "goal",
            "campaign": "c2bf72f0-ff25-11e4-8cea-080027242395",
            "initial": true,
            "title": "This is a update to the goal title",
            "summary": "Updating the summary",
            "description": "Updating the description.",
            "pledged_vote_requirement": 1,
            "monetary_requirement": 100000,
            "completed": false,
            "completed_date": null,
            "updates": [],
            "associated_round": "a0106420-032c-11e5-8cea-080027242395",
            "donations": [],
            "previous_goal": null,
            "next_goal": "f2e92106-064b-11e5-8cea-080027242395"
        }
        
+ Response 405 (application/json)

        {
            "detail": "You cannot update a completed or active goal.",
            "status_code": 405
        }

### Delete a Goal [DELETE] ###
This endpoint allows for owners and editors to delete a goal, so long as the goal has not been completed 
and is not curretly active.

+ Response 204 (application/json)
        
+ Response 405 (application/json)

        {
            "detail": "You cannot delete a completed or active goal",
            "status_code": 405
        }
        
# Group Donations #
## Donation [/v1/donations/{id}/] ##

+ Parameters
    + id (required, object_uuid, `c2bf72f0-ff25-11e4-8cea-080027242395`) ... 
    String `id` representing the object_uuid of the campaign you would like 
to access, must be 36 characters long.
    Has example value.

### Retrieve a Donation [GET] ###
This endpoint allows users to access the details of any donation they have made. 
Only the owner of a donation is allowed to access any donations detail page.

+ Response 200 (application/json)

        {
            "id": "64d0b612-064c-11e5-8cea-080027242395",
            "type": "donation",
            "completed": false,
            "amount": 6000,
            "owner_username": "tyler_wiersing",
            "donated_for": null,
            "applied_to": [
                "f2e92106-064b-11e5-8cea-080027242395",
                "d1f1ee54-032d-11e5-8cea-080027242395"
            ],
            "owned_by": "tyler_wiersing",
            "campaign": "c2bf72f0-ff25-11e4-8cea-080027242395"
        }
        
+ Response 403 (application/json)

        {
            "detail": "Sorry only the owner of a donation is allowed to see its detail page.",
            "status_code": 403
        }

