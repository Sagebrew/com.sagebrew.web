FORMAT: 1A

# Sagebrew #
The Sagebrew API is based on a REST infrastructure. We've crafted our API with 
predictablility in mind and have stived to maintain a consistent architecture through
each of our interfaces. We utilize resource based URLs and HTTP response codes to 
alert developers of errors. We utilize OAuth 2.0 for authentication to ensure 
you can securely access our API and are able to easily meet the needs of your 
users utilizing existing libraries. Our API uses JSON to structure our responses
and you can expect to get it back across each ouf our endpoints.

## Rendering ##
For some endpoints Sagebrew provides server side rendering of resources so that you
can insert the html directly into your app. This may not be the wanted behavior by
most people so we have made this functionality available through a endpoint method.
For endpoints that indicate they can be rendered on the server side you can access
the method via something like `/:resource/:id/render/` or `/:resource/render/`.


## Error Handling ##
TODO


# Group Profile #
Sagebrew provides each of its users with a Profile which 
has a set amount of publicly accessible data. These endpoints should be utilized
for retrieving user specific data unless you're utilizing our Three Legged OAuth
implementation and are trying to gather information about the currently logged in
user.

## Profile Collection [/v1/profiles/] ##
### List all Profiles [GET] ###
+ Response 200 (application/json)

        {
            "count": 2,
            "next": null,
            "previous": null,
            "results": [
                {
                    "id": "devon_bleibtrey",
                    "type": "profile",
                    "first_name": "Devon",
                    "last_name": "Bleibtrey",
                    "username": "devon_bleibtrey",
                    "href": "https://www.sagebrew.com/v1/profiles/devon_bleibtrey/",
                    "profile_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/bc2ed03b9e17-198x198.jpeg",
                    "wallpaper_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/723335ffa833-1464x250.jpeg",
                    "reputation": 0,
                    "privileges": [
                        "base_privilege"
                    ],
                    "actions": [
                        "post",
                        "solution",
                        "question"
                    ],
                    "url": "https://www.sagebrew.com/user/devon_bleibtrey/"
                },
                {
                    "id": "tyler_wiersing",
                    "type": "profile",
                    "first_name": "Tyler",
                    "last_name": "Wiersing",
                    "username": "tyler_wiersing",
                    "href": "https://www.sagebrew.com/v1/profiles/tyler_wiersing/",
                    "profile_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/886832972c69-198x198.jpeg",
                    "wallpaper_pic": null,
                    "reputation": 0,
                    "privileges": [
                        "base_privilege",
                        "beta_user"
                    ],
                    "actions": [
                        "post",
                        "solution",
                        "question",
                        "intercom"
                    ],
                    "url": "https://www.sagebrew.com/user/tyler_wiersing/"
                }
            ]
        }

## Profile [/profiles/{id}/] ##
The profile detail endpoint can be used to retrieve a singular profile.

+ Parameters
    + id (required, username, `devon_bleibtrey`) ... String `id` representating the username of the profile you would
    like to access. This can be up to 30 characters long.
    Has example value.

### Retrieve a Profile [GET] ###
+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {
                "id": "devon_bleibtrey",
                "type": "profile",
                "first_name": "Devon",
                "last_name": "Bleibtrey",
                "username": "devon_bleibtrey",
                "href": "https://www.sagebrew.com/v1/profiles/devon_bleibtrey/",
                "profile_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/bc27-198x198.jpeg",
                "wallpaper_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/723f3-1464x250.jpeg",
                "reputation": 0,
                "privileges": [
                    "base_privilege"
                ],
                "actions": [
                    "post",
                    "solution",
                    "question"
                ],
                "url": "https://www.sagebrew.com/user/devon_bleibtrey/"
            }

## Me [/me/] ##
The me endpoint can be used to access the profile that is currently authenticated.

### Retrieve Logged In Profile [GET] ###
+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {
                "id": "devon_bleibtrey",
                "type": "profile",
                "first_name": "Devon",
                "last_name": "Bleibtrey",
                "username": "devon_bleibtrey",
                "href": "https://www.sagebrew.com/v1/profiles/devon_bleibtrey/",
                "profile_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/bc27-198x198.jpeg",
                "wallpaper_pic": "https://sagebrew.s3.amazonaws.com/profile_pictures/723f3-1464x250.jpeg",
                "reputation": 0,
                "privileges": [
                    "base_privilege"
                ],
                "actions": [
                    "post",
                    "solution",
                    "question"
                ],
                "url": "https://www.sagebrew.com/user/devon_bleibtrey/"
            }


## Profile's Friend Requests [/me/friend_requests/] ##
### Retrieve Friend Requests [GET] ###
+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {}


## Profile's Wall [/me/wall/] ##
### Retrieve Wall [GET] ###
+ Response 200 (application/json)

    + Header

            Authorization: Bearer {access_token}

    + Body

            {}


# Group Campaign #
Campaign related resources of the **Campaign API**

## Campaign Collection [/v1/campaigns/] ##
### List all Campaigns [GET] ###
+ Response 200 (application/json)

        {
            "count": 1,
            "next": null,
            "previous": null,
            "results": [
            {
                "id": "c2bf72f0-ff25-11e4-8cea-080027242395",
                "type": "politicalcampaign",
                "active": true,
                "biography": "I am running for office, deal with it.",
                "facebook": "",
                "linkedin": "",
                "youtube": "",
                "twitter": "",
                "website": "",
                "wallpaper_pic": "https://sagebrew-dev.s3.amazonaws.com/profile_pictures/5a42614a-6280-74b5-4303-4a35d8e27397-198x198.jpeg",
            "profile_pic": "https://sagebrew-dev.s3.amazonaws.com/profile_pictures/5a42614a-6280-74b5-4303-4a35d8e27397-198x198.jpeg",
            "owner_username": null,
            "url": "https://sagebrew.local.dev/action/None/",
            "href": "https://sagebrew.local.dev/v1/campaigns/c2bf72f0-ff25-11e4-8cea-080027242395/",
            "rounds": [
                "a0106420-032c-11e5-8cea-080027242395"
            ],
            "updates": [
                "c52684fa-0008-11e5-8cea-080027242395",
                "d4750af8-0008-11e5-8cea-080027242395",
                "3a22f86a-0009-11e5-8cea-080027242395",
                "447709b4-0009-11e5-8cea-080027242395"
            ],
            "position": "d8b0526c-ff27-11e4-8cea-080027242395",
            "active_goals": [
                "d1f1ee54-032d-11e5-8cea-080027242395"
            ],
            "active_round": "a0106420-032c-11e5-8cea-080027242395",
            "upcoming_round": "eb31b9ea-0331-11e5-8cea-080027242395",
            "vote_count": 0
            }
            ]
        }

## Notes Collection [/notes] ##
### List all Notes [GET] ###
+ Response 200 (application/json)

        [{
          "id": 1, "title": "Jogging in park"
        }, {
          "id": 2, "title": "Pick-up posters from post-office"
        }]

### Create a Note [POST] ###
+ Request (application/json)

        { "title": "Buy cheese and bread for breakfast." }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

## Note [/notes/{id}] ##
A single Note object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Note to perform action with.
    Has example value.

### Retrieve a Note [GET] ###
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            { "id": 2, "title": "Pick-up posters from post-office" }

### Remove a Note [DELETE] ###
+ Response 204
