machine:
  services:
    - rabbitmq-server
    - docker

dependencies:
  pre:
    - pip install setuptools==12.3
    - pip install awscli
    - sudo apt-get -y install libjpeg-dev
  cache_directories:
    - elasticsearch-1.3.2
    - DynamoDBLocal_lib
    - neo4j-community-2.2.2
  post:
    - pip install -r ~/com.sagebrew.web/requirements/test.txt --exists-action=w
    - sudo chown ubuntu /etc/rsyslog.d/
    - python ~/com.sagebrew.web/sagebrew/manage.py logglypopulation
    - sudo chown root /etc/rsyslog.d/
    - sudo service rsyslog restart
    - if [[ ! -e elasticsearch-1.3.2.tar ]]; then wget https://s3.amazonaws.com/sagebrew/elasticsearch-1.3.2.tar && tar -xvf elasticsearch-1.3.2.tar; fi
    - if [[ ! -e dynamodb_local_latest.tar ]]; then wget https://s3.amazonaws.com/sagebrew/dynamodb_local_2015-04-27_1.0.tar && tar -xvf dynamodb_local_2015-04-27_1.0.tar; fi
    - if [[ ! -e neo4j-community-2.2.2.zip ]]; then wget https://s3.amazonaws.com/sagebrew/neo4j-community-2.2.2.zip && yes Y | unzip neo4j-community-2.2.2.zip; fi
    - neo4j-community-2.2.2/bin/neo4j start:
        background: true
    - java  -Xmx1024m -Djava.library.path=DynamoDBLocal_lib/DynamoDBLocal_lib -jar DynamoDBLocal.jar:
        background: true
    - elasticsearch-1.3.2/bin/elasticsearch:
        background: true
    - sleep 30
    - neoauth neo4j neo4j my-p4ssword || true
    - sudo apt-get install supervisor
    - sudo chown -R ubuntu /etc/supervisor/conf.d/
    - python ~/com.sagebrew.web/sagebrew/manage.py populatesupervisor worker-test ubuntu
    - sudo chown -R root /etc/supervisor/conf.d/
    - sudo supervisorctl reread
    - sudo supervisorctl reload:
        background: true
    - python ~/com.sagebrew.web/sagebrew/manage.py create_dynamo_tables
    - python ~/com.sagebrew.web/sagebrew/manage.py populate_indices
    - python ~/com.sagebrew.web/sagebrew/manage.py clear_neo_db

checkout:
  post:
    - git submodule sync
    - git submodule update --init

test:
  override:
    - coverage run --source='.' manage.py test --failfast
    - coverage html --fail-under=79
    - coveralls --rcfile=$CIRCLE_ARTIFACTS
    - flake8 ~/com.sagebrew.web/sagebrew/ --ignore C901
  post:
    - ~/virtualenvs/venv-system/bin/python ~/com.sagebrew.web/sagebrew/manage.py dockerfilepopulation
    - sed "s/<EMAIL>/$DOCKER_EMAIL/;s/<AUTH>/$DOCKER_AUTH/" < ~/com.sagebrew.web/dockercfg.template > ~/.dockercfg
    - docker build -t sagebrew/sb_worker:$CIRCLE_SHA1 ~/com.sagebrew.web/dockerfiles/worker/
    - docker build -t sagebrew/sb_web:$CIRCLE_SHA1 ~/com.sagebrew.web/dockerfiles/web_app/
    - docker build -t sagebrew/sys_util:$CIRCLE_SHA1 ~/com.sagebrew.web/dockerfiles/sys_util/
    # DO NOT CHANGE GRAPHEN_NEO4J_REST_URL to NEO4J_REST_URL the NEO4J_REST_URL
    # points to the local circle instance and the docker instance needs the
    # graphen instance to work
    - docker run -d --name db training/postgres
    - docker run -h box-sys-util --name sb_sys_util -P --link db:db
        -e DB_USER=docker -e DB_DOCKER_NAME=docker
        -e NEO4J_REST_URL=$GRAPHEN_NEO4J_REST_URL -e APP_USER=$APP_USER
        -e APP_NAME=$APP_NAME
        -e PROJECT_NAME=$PROJECT_NAME
        -e PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME
        -e CIRCLECI=$CIRCLECI -e CIRCLE_BRANCH=$CIRCLE_BRANCH
        -e APPLICATION_SECRET_KEY=$APPLICATION_SECRET_KEY
        -e BOMBERMAN_API_KEY=$BOMBERMAN_API_KEY
        -e AWS_S3_BUCKET=$AWS_S3_BUCKET
        -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
        -e ALCHEMY_API_KEY=$ALCHEMY_API_KEY
        -e ADDRESS_VALIDATION_ID=$ADDRESS_VALIDATION_ID
        -e ADDRESS_VALIDATION_TOKEN=$ADDRESS_VALIDATION_TOKEN
        -e ELASTIC_SEARCH_HOST=$ELASTIC_SEARCH_HOST
        -e ELASTIC_SEARCH_PORT=$ELASTIC_SEARCH_PORT
        -e ELASTIC_SEARCH_USER=$ELASTIC_SEARCH_USER
        -e ELASTIC_SEARCH_KEY=$ELASTIC_SEARCH_KEY
        -e REDIS_LOCATION=$REDIS_LOCATION
        -e REDIS_PORT=$REDIS_PORT
        -e QUEUE_USERNAME=$QUEUE_USERNAME
        -e QUEUE_PASSWORD=$QUEUE_PASSWORD
        -e QUEUE_HOST=$QUEUE_HOST
        -e QUEUE_PORT=$QUEUE_PORT
        -e LOGENT_TOKEN=$LOGENT_TOKEN
        -e DEPLOYED=true
        -e SYS_LOG_TOKEN=$SYS_LOG_TOKEN
        -e OAUTH_CLIENT_ID=$OAUTH_CLIENT_ID
        -e OAUTH_CLIENT_SECRET=$OAUTH_CLIENT_SECRET
        -e DYNAMO_IP=$DYNAMO_IP
        -e CRED_PASSWORD=development
        -e CRED_USER=test_username
        -e OAUTH_CLIENT_SECRET_CRED=test_env_this_is_it
        -e OAUTH_CLIENT_ID_CRED=test_env_client_id
        -e SHA1=$CIRCLE_SHA1
        -d -t sagebrew/sys_util:$CIRCLE_SHA1
    - docker run -h box-worker --name sb_worker -P --link db:db
        -e DB_USER=docker -e DB_DOCKER_NAME=docker
        -e NEO4J_REST_URL=$GRAPHEN_NEO4J_REST_URL -e APP_USER=$APP_USER
        -e APP_NAME=$APP_NAME
        -e PROJECT_NAME=$PROJECT_NAME
        -e CIRCLECI=$CIRCLECI -e CIRCLE_BRANCH=$CIRCLE_BRANCH
        -e PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME
        -e APPLICATION_SECRET_KEY=$APPLICATION_SECRET_KEY
        -e BOMBERMAN_API_KEY=$BOMBERMAN_API_KEY
        -e AWS_S3_BUCKET=$AWS_S3_BUCKET
        -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
        -e ALCHEMY_API_KEY=$ALCHEMY_API_KEY
        -e ADDRESS_VALIDATION_ID=$ADDRESS_VALIDATION_ID
        -e ADDRESS_VALIDATION_TOKEN=$ADDRESS_VALIDATION_TOKEN
        -e ELASTIC_SEARCH_HOST=$ELASTIC_SEARCH_HOST
        -e ELASTIC_SEARCH_PORT=$ELASTIC_SEARCH_PORT
        -e ELASTIC_SEARCH_USER=$ELASTIC_SEARCH_USER
        -e ELASTIC_SEARCH_KEY=$ELASTIC_SEARCH_KEY
        -e REDIS_LOCATION=$REDIS_LOCATION
        -e REDIS_PORT=$REDIS_PORT
        -e QUEUE_USERNAME=$QUEUE_USERNAME
        -e QUEUE_PASSWORD=$QUEUE_PASSWORD
        -e QUEUE_HOST=$QUEUE_HOST
        -e QUEUE_PORT=$QUEUE_PORT
        -e LOGENT_TOKEN=$LOGENT_TOKEN
        -e DEPLOYED=true
        -e SYS_LOG_TOKEN=$SYS_LOG_TOKEN
        -e OAUTH_CLIENT_ID=$OAUTH_CLIENT_ID
        -e OAUTH_CLIENT_SECRET=$OAUTH_CLIENT_SECRET
        -e DYNAMO_IP=$DYNAMO_IP
        -e CRED_PASSWORD=development
        -e CRED_USER=test_username
        -e OAUTH_CLIENT_SECRET_CRED=test_env_this_is_it
        -e OAUTH_CLIENT_ID_CRED=test_env_client_id
        -e SHA1=$CIRCLE_SHA1
        -d -t sagebrew/sb_worker:$CIRCLE_SHA1
    # It appears if two migrations run at the same time they cause a
    - docker run -h box-webapp --name sb_web -P --link db:db
        -e DB_USER=docker -e DB_DOCKER_NAME=docker -p 443:443 -p 80:80
        -e NEO4J_REST_URL=$GRAPHEN_NEO4J_REST_URL -e APP_USER=$APP_USER
        -e APP_NAME=$APP_NAME
        -e PROJECT_NAME=$PROJECT_NAME
        -e CIRCLECI=$CIRCLECI -e CIRCLE_BRANCH=$CIRCLE_BRANCH
        -e PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME
        -e APPLICATION_SECRET_KEY=$APPLICATION_SECRET_KEY
        -e BOMBERMAN_API_KEY=$BOMBERMAN_API_KEY
        -e AWS_S3_BUCKET=$AWS_S3_BUCKET
        -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
        -e ALCHEMY_API_KEY=$ALCHEMY_API_KEY
        -e ADDRESS_VALIDATION_ID=$ADDRESS_VALIDATION_ID
        -e ADDRESS_VALIDATION_TOKEN=$ADDRESS_VALIDATION_TOKEN
        -e ELASTIC_SEARCH_HOST=$ELASTIC_SEARCH_HOST
        -e ELASTIC_SEARCH_PORT=$ELASTIC_SEARCH_PORT
        -e ELASTIC_SEARCH_USER=$ELASTIC_SEARCH_USER
        -e ELASTIC_SEARCH_KEY=$ELASTIC_SEARCH_KEY
        -e REDIS_LOCATION=$REDIS_LOCATION
        -e REDIS_PORT=$REDIS_PORT
        -e QUEUE_USERNAME=$QUEUE_USERNAME
        -e QUEUE_PASSWORD=$QUEUE_PASSWORD
        -e QUEUE_HOST=$QUEUE_HOST
        -e QUEUE_PORT=$QUEUE_PORT
        -e LOGENT_TOKEN=$LOGENT_TOKEN
        -e DEPLOYED=true
        -e SYS_LOG_TOKEN=$SYS_LOG_TOKEN
        -e OAUTH_CLIENT_ID=$OAUTH_CLIENT_ID
        -e OAUTH_CLIENT_SECRET=$OAUTH_CLIENT_SECRET
        -e DYNAMO_IP=$DYNAMO_IP
        -e CRED_PASSWORD=development
        -e CRED_USER=test_username
        -e OAUTH_CLIENT_SECRET_CRED=test_env_this_is_it
        -e OAUTH_CLIENT_ID_CRED=test_env_client_id
        -e SHA1=$CIRCLE_SHA1
        -d -t sagebrew/sb_web:$CIRCLE_SHA1
    # Sleep time based on aws timeout counts. This insures it is possible
    # for the deployed code to be ready within the set amount of time
    # aws will give it.
    - sleep 90
    - curl --retry 10 --retry-delay 5 --insecure -v https://localhost/
    - curl -X POST -d "grant_type=password&username=test_username&password=development&client_id=test_env_client_id&client_secret=test_env_this_is_it" https://localhost/o/token/ --insecure
    - docker logs sb_web >> $CIRCLE_ARTIFACTS/sb_web.log
    - docker logs sb_worker >> $CIRCLE_ARTIFACTS/sb_worker.log
    - docker logs sb_sys_util >> $CIRCLE_ARTIFACTS/sys_util.log

deployment:
  production:
    branch: master
    commands:
      - python ~/com.sagebrew.web/sagebrew/manage.py populateenvconfig /home/ubuntu/com.sagebrew.web/$CIRCLE_SHA1-$CIRCLE_BRANCH-web.json /home/ubuntu/com.sagebrew.web/$CIRCLE_SHA1-$CIRCLE_BRANCH-worker.json
      - bash -x ~/com.sagebrew.web/deployment/master.sh $CIRCLE_SHA1
  staging:
    branch: staging
    commands:
      - python ~/com.sagebrew.web/sagebrew/manage.py populateenvconfig /home/ubuntu/com.sagebrew.web/$CIRCLE_SHA1-$CIRCLE_BRANCH-web.json /home/ubuntu/com.sagebrew.web/$CIRCLE_SHA1-$CIRCLE_BRANCH-worker.json
      - bash -x ~/com.sagebrew.web/deployment/staging.sh $CIRCLE_SHA1


general:
  build_dir: sagebrew
