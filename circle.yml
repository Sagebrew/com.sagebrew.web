machine:
  services:
    - rabbitmq-server
    - docker
    - neo4j


dependencies:
  pre:
    - pip install awscli
  cache_directories:
    - elasticsearch-1.3.2
    - AWS-ElasticBeanstalk-CLI-2.6.3
  post:
    - pip install -r ../requirements/test.txt
    - if [[ ! -e AWS-ElasticBeanstalk-CLI-2.6.3 ]]; then wget https://s3.amazonaws.com/elasticbeanstalk/cli/AWS-ElasticBeanstalk-CLI-2.6.3.zip && unzip AWS-ElasticBeanstalk-CLI-2.6.3.zip && rm -r AWS-ElasticBeanstalk-CLI-2.6.3.zip; fi
    - sudo chown ubuntu /etc/rsyslog.d/
    - ~/virtualenvs/venv-system/bin/python ~/com.sagebrew.web/sagebrew/manage.py logglypopulation $LOG_ACCOUNT $LOG_TOKEN
    - sudo chown root /etc/rsyslog.d/
    - sudo service rsyslog restart
    - if [[ ! -e elasticsearch-1.3.2 ]]; then wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.3.2.tar.gz && tar -xvf elasticsearch-1.3.2.tar.gz; fi
    - elasticsearch-1.3.2/bin/elasticsearch: {background: true}
    - sudo apt-get install supervisor
    - sudo chown -R ubuntu /etc/supervisor/conf.d/
    - ~/virtualenvs/venv-system/bin/python ~/com.sagebrew.web/sagebrew/manage.py populatesupervisor worker-test ubuntu
    - sudo chown -R root /etc/supervisor/conf.d/
    - sudo supervisorctl reread
    - sudo supervisorctl reload:
        background: true
    - ~/virtualenvs/venv-system/bin/python ~/com.sagebrew.web/sagebrew/manage.py populateenvconfig /home/ubuntu/com.sagebrew.web/$CIRCLE_SHA1-staging_web.json /home/ubuntu/com.sagebrew.web/$CIRCLE_SHA1-staging_worker.json
    - python ~/com.sagebrew.web/sagebrew/manage.py runserver 127.0.0.1:8080:
        background: true

test:
  override:
    - python manage.py test sb_tag.tests.test_utils.TestCreateAutoTagUtil.test_create_auto_tag_util_success_tag_exists
    #- coverage run --source='.' manage.py test --failfast:
    #    timeout: 300

  post:
    #- coverage html
    #- coveralls --rcfile=$CIRCLE_ARTIFACTS
    #- pep8 --show-source --exclude='~/com.sagebrew.web/sagebrew/api/alchemyapi.py` --show-pep8 ~/com.sagebrew.web/sagebrew/
    - ~/virtualenvs/venv-system/bin/python ~/com.sagebrew.web/sagebrew/manage.py dockerfilepopulation
    - sed "s/<EMAIL>/$DOCKER_EMAIL/;s/<AUTH>/$DOCKER_AUTH/" < ~/com.sagebrew.web/dockercfg.template > ~/.dockercfg
    - docker build -t sagebrew/sb_worker:$CIRCLE_SHA1 ~/com.sagebrew.web/dockerfiles/worker/
    - docker build -t sagebrew/sb_web:$CIRCLE_SHA1 ~/com.sagebrew.web/dockerfiles/web_app/
    # DO NOT CHANGE GRAPHEN_NEO4J_REST_URL to NEO4J_REST_URL the NEO4J_REST_URL
    # points to the local circle instance and the docker instance needs the
    # graphen instance to work
    - docker run -h box-worker --name worker_one
        -e NEO4J_REST_URL=$GRAPHEN_NEO4J_REST_URL -e APP_USER=$APP_USER
        -e REPO_NAME=$REPO_NAME -e PROJECT_NAME=$PROJECT_NAME
        -e LOG_ACCOUNT=$LOG_ACCOUNT -e LOG_TOKEN=$LOG_TOKEN
        -e CIRCLECI=$CIRCLECI -e CIRCLE_BRANCH=$CIRCLE_BRANCH
        -e APPLICATION_SECRET_KEY=$APPLICATION_SECRET_KEY
        -e BOMBERMAN_API_KEY=$BOMBERMAN_API_KEY
        -e SSL_CERT_LOCATION=$SSL_CERT_LOCATION
        -e SSL_KEY_LOCATION=$SSL_KEY_LOCATION
        -e AWS_S3_BUCKET=$AWS_S3_BUCKET
        -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        -e ALCHEMY_API_KEY=$ALCHEMY_API_KEY
        -e ADDRESS_VALIDATION_ID=$ADDRESS_VALIDATION_ID
        -e ADDRESS_VALIDATION_TOKEN=$ADDRESS_VALIDATION_TOKEN
        -e ELASTIC_SEARCH_HOST=$ELASTIC_SEARCH_HOST
        -e ELASTIC_SEARCH_PORT=$ELASTIC_SEARCH_PORT
        -e ELASTIC_SEARCH_USER=$ELASTIC_SEARCH_USER
        -e ELASTIC_SEARCH_KEY=$ELASTIC_SEARCH_KEY
        -e REDIS_LOCATION=$REDIS_LOCATION
        -e REDIS_PORT=$REDIS_PORT
        -e QUEUE_USERNAME=$QUEUE_USERNAME
        -e QUEUE_PASSWORD=$QUEUE_PASSWORD
        -e QUEUE_HOST=$QUEUE_HOST
        -e QUEUE_PORT=$QUEUE_PORT
        -d -t sagebrew/sb_worker:$CIRCLE_SHA1
    - docker run -h box-webapp --name web_app_one -p 443:443 -p 80:80
        -e NEO4J_REST_URL=$GRAPHEN_NEO4J_REST_URL -e APP_USER=$APP_USER
        -e REPO_NAME=$REPO_NAME -e PROJECT_NAME=$PROJECT_NAME
        -e LOG_ACCOUNT=$LOG_ACCOUNT -e LOG_TOKEN=$LOG_TOKEN
        -e CIRCLECI=$CIRCLECI -e CIRCLE_BRANCH=$CIRCLE_BRANCH
        -e APPLICATION_SECRET_KEY=$APPLICATION_SECRET_KEY
        -e BOMBERMAN_API_KEY=$BOMBERMAN_API_KEY
        -e SSL_CERT_LOCATION=$SSL_CERT_LOCATION
        -e SSL_KEY_LOCATION=$SSL_KEY_LOCATION
        -e AWS_S3_BUCKET=$AWS_S3_BUCKET
        -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        -e ALCHEMY_API_KEY=$ALCHEMY_API_KEY
        -e ADDRESS_VALIDATION_ID=$ADDRESS_VALIDATION_ID
        -e ADDRESS_VALIDATION_TOKEN=$ADDRESS_VALIDATION_TOKEN
        -e ELASTIC_SEARCH_HOST=$ELASTIC_SEARCH_HOST
        -e ELASTIC_SEARCH_PORT=$ELASTIC_SEARCH_PORT
        -e ELASTIC_SEARCH_USER=$ELASTIC_SEARCH_USER
        -e ELASTIC_SEARCH_KEY=$ELASTIC_SEARCH_KEY
        -e REDIS_LOCATION=$REDIS_LOCATION
        -e REDIS_PORT=$REDIS_PORT
        -e QUEUE_USERNAME=$QUEUE_USERNAME
        -e QUEUE_PASSWORD=$QUEUE_PASSWORD
        -e QUEUE_HOST=$QUEUE_HOST
        -e QUEUE_PORT=$QUEUE_PORT
        -d -t sagebrew/sb_web:$CIRCLE_SHA1
    - sleep 10
    - curl --retry 10 --retry-delay 5 --insecure -v https://localhost/

checkout:
  post:
    - git submodule sync
    - git submodule update --init

deployment:
#  production:
#    branch: master
  staging:
    branch: staging
    commands:
      #- coverage report --fail-under=100
      - bash -x ~/com.sagebrew.web/deployment/staging.sh $CIRCLE_SHA1
      - git checkout master
      - git merge --no-edit staging
      - git push origin master
      - git checkout staging


general:
  build_dir: sagebrew

